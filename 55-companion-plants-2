public Boolean companionPlants(List<String> plants) {
    /* Some plants are considered companion plants. They grow better when planted next to each other. For the purpose
    of this problem, we consider the following plants to be companions: lettuce and cucumbers, lettuce and onions,
    onions and carrots, and onions and tomatoes. The same plants planted next to each other are not considered
    companions.

    Write a function isCompanion that takes as input a list of plants being planted in a row. Return true only if
    every plant in the list is planted next to a companion and return false otherwise.
    */

    //Loop over the List and check if the current element is a companion to the next

    //Create a Boolean flag variable
    Boolean results = false;


// First, check to see if the list is empty and return true
    if (plants.isEmpty()) {
        return true;
    } else {
        // Create a Loop for the List
        for (Integer i = 0; i < (plants.size() - 1); i++) {
            // Check if the plants are not companions
            if (!( (plants.get(i).equals('lettuce') && (plants.get(i + 1).equals('cucumbers') || plants.get(i + 1).equals('onions'))) ||
            (plants.get(i).equals('onions') && (plants.get(i + 1).equals('carrots') || plants.get(i + 1).equals('tomatoes') || plants.get(i + 1).equals('lettuce'))) ||
            (plants.get(i).equals('cucumbers') && (plants.get(i + 1).equals('lettuce'))) ||
            (plants.get(i).equals('carrots') && (plants.get(i + 1).equals('onions'))) ||
            (plants.get(i).equals('tomatoes') && (plants.get(i + 1).equals('onions'))) ))
            results = false;
            break; // Exit the loop, as we found a non-companion plant
        }
    }

    return results;

}