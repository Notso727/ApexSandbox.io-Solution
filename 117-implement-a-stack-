public class Stack {

    /*The stack is one of the simplest data structures and almost one of the most important in programing. We use a
    stack to organize objects with the Last In - First Out (LIFO) principle. A user may add to the stack at any time,
    but may only have access to the object that was last inserted into the stack.

    In this challenge you will implement a stack data structure with the following methods.

    Push : add an object to the top of the stack
    Pop: remove the object at the top of the stack
    Peek: return the object at the top of the stack but do not remove
    Size: return the number of objects in the stack
    Is Empty: return true is the stack is empty, false if not
     */

    //Create a list for the underlying data structure
    List<Object> stackList = new List<Object>();

    public void push(Object obj) {
        //implement push
        stackList.add(obj);
    }

    public Object pop() {
        //implement pop
        if (!isEmpty())
            return stackList.remove(size()-1);
        else
            return null;
    }

    public Integer size() {
        return stackList.size();
    }

    public Object peek(){
        //implement peek
        if (!isEmpty())
            return stackList.get(size()-1);
        else
            return null;
    }

    public Boolean isEmpty() {
        //Check if the Stack List is empty
        Boolean flag = false;
        if(stackList.isEmpty()) flag = true;
        return flag;
    }

}