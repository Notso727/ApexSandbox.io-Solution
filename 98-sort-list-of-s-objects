public List<Account> getAccounts(List<Account> accounts) {
    /* Implement the method getAccounts(), function, which accepts a list of accounts as input and returns a new
    list of accounts sorted in descending order based on the Annual Revenue field.
     */

    List<AccountWrapper> accWrapperList = new List<AccountWrapper>();

        // Wrap Account records in AccountWrapper
    for (Account acc : accounts) {
        accWrapperList.add(new AccountWrapper(acc));
    }

    // Sort the AccountWrapper list
    accWrapperList.sort();

    // Get the sorted Account records
    List<Account> sortedAccList = new List<Account>();
    for (AccountWrapper accWrapper : accWrapperList) {
        sortedAccList.add(accWrapper.acc);
    }

    // Now, 'sortedAccList' contains the sorted Account records based on the AnnualRevenue field
    return sortedAccList;

}

//Extra class here

public class AccountWrapper implements Comparable<AccountWrapper> {
    public Account acc { get; set; }

    public AccountWrapper(Account a) {
        acc = a;
    }

    public Integer compareTo(AccountWrapper accWrapperToCompare) {
        if (this.acc.AnnualRevenue == accWrapperToCompare.acc.AnnualRevenue) {
            return 0;
        } else if (this.acc.AnnualRevenue > accWrapperToCompare.acc.AnnualRevenue) {
            return -1;
        } else {
            return 1;
        }
    }

}